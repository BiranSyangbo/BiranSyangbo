package com.example.datastructure.algoexpert.problem.array;

import com.example.datastructure.algoexpert.problem.divideandconquer.DivideAndConquer;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class MinimumRoundTest {


    @Test
    void testCase1() {
        int[] arr = {218, 211, 220, 218, 211, 218, 218, 217, 213, 215, 219, 214, 210, 210, 212, 219, 214, 211, 216, 218, 211, 216, 218, 218, 212, 210, 211, 211, 215, 216, 212, 219, 219, 210, 217, 218, 217, 217, 213, 216, 217, 212, 217, 219, 215, 217, 215, 218, 210, 218, 218, 210, 212, 219, 217, 214, 216, 218, 220, 217, 215, 215, 213, 210, 212, 211, 215, 218, 214, 212, 211, 216, 210, 216, 218, 220, 211, 211, 212, 218, 218, 210, 215, 210, 215, 213, 212, 220, 217, 219, 214, 216, 217, 214, 215, 213, 218, 219, 220, 219, 215, 216, 219, 218, 211, 215, 210, 214, 210, 215, 219, 214, 212, 217, 219, 215, 214, 217, 213, 219, 213, 218, 217, 214, 216, 219, 217, 217, 211, 214, 214, 220, 220, 216, 218, 216, 220, 211, 213, 219, 218, 219, 215, 216, 216, 220, 211, 214, 212, 219, 210, 215, 218, 218, 220, 210, 214, 211, 217, 214, 220, 214, 213, 210, 219, 213, 214, 210, 212, 216, 210, 217, 211, 215, 217, 213, 214, 210, 217, 212, 217, 216, 217, 210, 211, 213, 214, 220, 211, 216, 214, 211, 217, 211, 211, 215, 219, 219, 213, 216};
        assertEquals(70, MinimumRound.minimumRounds(arr));
    }

    @Test
    void testCase2() {
        int[] arr = {2, 2, 3, 3, 2, 4, 4, 4, 4, 4};
        assertEquals(4, MinimumRound.minimumRounds(arr));
    }

    @Test
    void testCase3() {
        int[] arr = {1, 1, 1, 1, 1, 1, 1};
        assertEquals(3, MinimumRound.minimumRounds(arr));
    }

    @Test
    void testCase4() {
        int[] arr = {69, 65, 62, 64, 70, 68, 69, 67, 60, 65, 69, 62, 65, 65, 61, 66, 68, 61, 65, 63, 60, 66, 68, 66, 67, 65, 63, 65, 70, 69, 70, 62, 68, 70, 60, 68, 65, 61, 64, 65, 63, 62, 62, 62, 67, 62, 62, 61, 66, 69};
        assertEquals(20, MinimumRound.minimumRounds(arr));
    }
}