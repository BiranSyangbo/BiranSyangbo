import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    ext {
        gradleWrapperVersion = '7.4.1'
        gradleTestProject = subprojects.findAll {
            [
                    'spring-batch',
                    'concurrency',
                    'domain',
                    'utils',
                    'application'
            ].contains(it.name)
        }
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

plugins {
    id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

description = '''\
Run as: Gradle clean
'''

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {

    group = 'com.spring.practice'
    version = '0.0.1-SNAPSHOT'


    repositories {
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        mavenLocal()
        mavenCentral()
    }
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }
    afterEvaluate {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-devtools'
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
            annotationProcessor 'org.projectlombok:lombok'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
//            implementation 'org.springframework.boot:spring-boot-starter-jdbc'
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
            runtimeOnly 'org.postgresql:postgresql'
            implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
            implementation 'org.springframework.boot:spring-boot-starter-batch'
            testImplementation 'org.springframework.batch:spring-batch-test'
            implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

        }
    }
}

configure(project.gradleTestProject) {

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    sourceSets.main.output.resourcesDir = sourceSets.main.java.classesDirectory
    sourceSets.test.output.resourcesDir = sourceSets.test.java.classesDirectory
    configurations {
        implementation.setCanBeResolved(true)
        api.setCanBeResolved(true)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    enabled(false)
}
jar {
    enabled(true)
}