buildscript {
    ext {
        gradleTestProject = subprojects.findAll {
            [
                    'spring-batch',
                    'concurrency'
            ].contains(it.name)
        }
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

plugins {
    id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

sourceCompatibility = '17'
description = '''\
Run as: Gradle clean
'''

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {

    group = 'com.spring.practice'
    version = '0.0.1-SNAPSHOT'


    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }
    afterEvaluate {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
            annotationProcessor 'org.projectlombok:lombok'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
        }
    }
}

configure(project.gradleTestProject) {

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    sourceSets.main.output.resourcesDir = sourceSets.main.java.classesDirectory
    sourceSets.test.output.resourcesDir = sourceSets.test.java.classesDirectory
    configurations {
        implementation.setCanBeResolved(true)
        api.setCanBeResolved(true)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
